@page "/classifier"
@inject HttpClient Http
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container">
    <h1>Classify a text</h1>

    <div>
        <label for="title">Title</label>
        <input id="title" type="text" placeholder="Title" @bind="classified.Title" class="input title" />
    </div>

    <div>
        <label for="subject">Subject</label>
        <input id="subject" type="text" placeholder="Subject" @bind="classified.Subject" class="input subject" />
    </div>

    <div>
        <label for="date">Date</label>
        <input id="date" type="text" placeholder="Date" @bind="classified.Date" class="input date" />
    </div>

    <textarea placeholder="Text" @bind="classified.Text" class="input text"></textarea>
    <button @onclick="Classify">Classify</button>
    <p style="display: @displayStyle">Classification @(this.classified.isClassifiedFake == true ? "fake" : "real")</p>
</div>


@code {
    public Classified classified { get; set; } = new Classified();
    public string displayStyle { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        var LoggedIn = await localStorage.ContainKeyAsync("token");
        if (!LoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private class CachedClassificationResponse
    {
        public bool Found { get; set; }
        public bool IsClassifiedFake { get; set; }
    }
    private class ClassificationResponse
    {
        public bool IsClassifiedFake { get; set; }
    }

    public async Task Classify()
    {
        var req = new Dictionary<string, dynamic>
{
{ "title", classified.Title },
{ "text", classified.Text },
{ "subject", classified.Subject },
{ "date", classified.Date },
};

        // check to see if article is in cache
        HttpResponseMessage res = await
            Http.PostAsJsonAsync($"{@Configuration["NewsStorage"]}/cached_classifications",
            req);
        CachedClassificationResponse ccr = await res.Content.ReadFromJsonAsync<CachedClassificationResponse>();
        if (ccr.Found)
        {
            this.classified.isClassifiedFake = ccr.IsClassifiedFake;
        }
        else
        {
            // classify instance
            res = await Http.PostAsJsonAsync($"{@Configuration["ClassificationService"]}/classifications", req);
            this.classified.isClassifiedFake = (await res.Content.ReadFromJsonAsync<ClassificationResponse>()).IsClassifiedFake;

            // store the article in cache
            await Http.PostAsJsonAsync($"{@Configuration["NewsStorage"]}/cached_classifications/store", req);
        }
        displayStyle = "block";
    }

}
